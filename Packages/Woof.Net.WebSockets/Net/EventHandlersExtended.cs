namespace Woof.Net;

/// <summary>
/// Represents the method that will handle an event that has no event data. Minimalistic version.
/// </summary>
public delegate void EventHandlerSlim();

/// <summary>
/// Represents the method that will handle an event when the event provides data. No sender version.
/// </summary>
/// <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
/// <param name="e">An object that contains the event data.</param>
public delegate void EventHandlerSlim<TEventArgs>(TEventArgs e);

/// <summary>
/// Represents the asynchronous method that will handle an event that has no event data.
/// </summary>
/// <param name="sender">The source of the event.</param>
/// <param name="e">An object that contains no event data.</param>
/// <returns>A <see cref="ValueTask"/> returned by the event handler.</returns>
public delegate ValueTask AsyncEventHandler(object? sender, EventArgs e);

/// <summary>
/// Represents the asynchronous method that will handle an event when the event provides data.
/// </summary>
/// <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
/// <param name="sender">The source of the event.</param>
/// <param name="e">An object that contains the event data.</param>
/// <returns>A <see cref="ValueTask"/> returned by the event handler.</returns>
public delegate ValueTask AsyncEventHandler<TEventArgs>(object? sender, TEventArgs e);

/// <summary>
/// Represents the asynchronous method that will handle an event that has no event data. Minimalistic version.
/// </summary>
/// <returns>A <see cref="ValueTask"/> returned by the event handler.</returns>
public delegate ValueTask AsyncEventHandlerSlim();

/// <summary>
/// Represents the asynchronous method that will handle an event when the event provides data. No sender version.
/// </summary>
/// <typeparam name="TEventArgs">The type of the event data generated by the event.</typeparam>
/// <param name="e">An object that contains the event data.</param>
/// <returns>A <see cref="ValueTask"/> returned by the event handler.</returns>
public delegate ValueTask AsyncEventHandlerSlim<TEventArgs>(TEventArgs e);
